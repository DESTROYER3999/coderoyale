{"VxwWMEqhci":{"title":"Test challenge","instructions":"\n\n-----\n\n\n## This is just a  test\nif it works:\n```\nIt will be amazing!\nand if it doesnt...\n```\nThat will b sad","exampleTests":"import cr_test\nfrom solution import solution_func\n\nclass ExampleTests(cr_test.TestGroup):\n    def integer_tests(self):\n        self.assert_equal(self, solution_func(1), 1)\n        self.assert_equal(self, solution_func(2), 2)\n\n    def string_tests(self):\n        self.assert_equal(self, solution_func(\"a\"), \"a\")\n\n","submissionTests":"import random\nfrom solution import solution_func\nimport cr_test\n\ndef actual_solution(x):\n    return x\n\n\nrandomInputs = []\nfor x in range(100):\n    randomInputs.append(random.randint(0, 50))\n\nclass SubmissionTests(cr_test.TestGroup):\n    def test_random_inputs(self):\n        for randomInput in randomInputs:\n            self.assert_equal(self, \n                                solution_func(randomInput), \n                                actual_solution(randomInput)\n                            )\n\n","initialSolution":"\ndef solution_func(x):\n    return x\n\n"},"hu9sTTHIbv":{"title":"ree challenge","instructions":"### In thi schalllenge you will ree\n\n-----\n\n### Descriptoin:\nYou need to make the function: `ree(n)` that takes in the integer value `n` and returns a list with that many strings of `\"ree\"`\n\n\n-----\n\n\n### Examples:\n```\nree(1) > [\"ree\"]\nree(2) > [\"ree\", \"ree\"]\nree(0) > []\n```","exampleTests":"import cr_test\nfrom solution import ree\n\nclass ReeTests(cr_test.TestGroup):\n    def normal_tests(self):\n        self.assert_equal(self, ree(1), [\"ree\"])\n        self.assert_equal(self, ree(2), [\"ree\", \"ree\"])\n    \n    def trick_tests(self):\n        self.assert_equal(self, ree(0), [])\n        self.assert_equal(self, ree(-1), [])\n\n\n","submissionTests":"import random\nfrom solution import ree\nimport cr_test\n\ndef actual_solution(n):\n    result = []\n    for x in range(n):\n        result.append(\"ree\")\n    return result\n\nrandomPositive = []\nrandomNegative = []\n\nfor x in range(20):\n    randomPositive.append(random.randint(0, 100))\n\nfor x in range(5):\n    randomNegative.append(random.randint(-10, 0))\n\n\nclass ReeSubmissionTests(cr_test.TestGroup):\n    def test_random_positive(self):\n        for randomInput in randomPositive:\n            self.assert_equal(self, \n                                ree(randomInput), \n                                actual_solution(randomInput)\n                            )\n\n    def test_random_negative(self):\n        for randomInput in randomNegative:\n            self.assert_equal(self, \n                                ree(randomInput), \n                                actual_solution(randomInput)\n                            )\n    \n    def test_zero(self):\n        self.assert_equal(self, \n                            ree(0), \n                            actual_solution(0)\n                        )\n\n\n","initialSolution":"\ndef ree(n):\n    # Write your code here\n    return n\n\n"}}